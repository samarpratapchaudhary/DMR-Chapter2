/* Write a function invert(x, p, n) that returns x with the n bits that begin at position p inverted (that is, 1 changed into 0 and vice versa), leaving the others unchanged. */
#include <stdio.h>

unsigned invert(unsigned x, int p, int n) {
    unsigned mask = (~(~0 << n)) << (p + 1 - n);
    return x ^ mask;   // XOR flips the bits in the mask region
}

int main() {
    unsigned x = 170; // 10101010 in binary
    int p = 5, n = 3;
    unsigned result = invert(x, p, n);
    printf("Original: %u\nInverted: %u\n", x, result);
    return 0;
}
